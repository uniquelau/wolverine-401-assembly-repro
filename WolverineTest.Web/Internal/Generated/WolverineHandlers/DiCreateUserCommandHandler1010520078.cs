// <auto-generated/>
#pragma warning disable
using Microsoft.Extensions.DependencyInjection;

namespace Internal.Generated.WolverineHandlers
{
    // START: DiCreateUserCommandHandler1010520078
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class DiCreateUserCommandHandler1010520078 : Wolverine.Runtime.Handlers.MessageHandler
    {
        private readonly Microsoft.Extensions.DependencyInjection.IServiceScopeFactory _serviceScopeFactory;

        public DiCreateUserCommandHandler1010520078(Microsoft.Extensions.DependencyInjection.IServiceScopeFactory serviceScopeFactory)
        {
            _serviceScopeFactory = serviceScopeFactory;
        }



        public override async System.Threading.Tasks.Task HandleAsync(Wolverine.Runtime.MessageContext context, System.Threading.CancellationToken cancellation)
        {
            using var serviceScope = _serviceScopeFactory.CreateScope();
            
            /*
            * Dependency: Descriptor: ServiceType: System.IServiceProvider Lifetime: Scoped ImplementationType: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
            * Your code is directly using IServiceProvider
            */
            var userManager = Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<Microsoft.AspNetCore.Identity.UserManager<WolverineTest.Web.Data.DbUser>>(serviceScope.ServiceProvider);
            // The actual message body
            var diCreateUserCommand = (WolverineTest.Web.Handlers.Di.DiCreateUserCommand)context.Envelope.Message;

            System.Diagnostics.Activity.Current?.SetTag("message.handler", "WolverineTest.Web.Handlers.Di.DiCreateUserHandler");
            
            // The actual message execution
            (var outgoing1, var outgoing2) = await WolverineTest.Web.Handlers.Di.DiCreateUserHandler.Handle(diCreateUserCommand, userManager).ConfigureAwait(false);

            
            // Outgoing, cascaded message
            await context.EnqueueCascadingAsync(outgoing1).ConfigureAwait(false);

            
            // Outgoing, cascaded message
            await context.EnqueueCascadingAsync(outgoing2).ConfigureAwait(false);

        }

    }

    // END: DiCreateUserCommandHandler1010520078
    
    
}

