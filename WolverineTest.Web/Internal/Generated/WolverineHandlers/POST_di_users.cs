// <auto-generated/>
#pragma warning disable
using Microsoft.AspNetCore.Routing;
using System;
using System.Linq;
using Wolverine.Http;
using Wolverine.Runtime;

namespace Internal.Generated.WolverineHandlers
{
    // START: POST_di_users
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class POST_di_users : Wolverine.Http.HttpHandler
    {
        private readonly Wolverine.Http.WolverineHttpOptions _wolverineHttpOptions;
        private readonly Wolverine.Runtime.IWolverineRuntime _wolverineRuntime;

        public POST_di_users(Wolverine.Http.WolverineHttpOptions wolverineHttpOptions, Wolverine.Runtime.IWolverineRuntime wolverineRuntime) : base(wolverineHttpOptions)
        {
            _wolverineHttpOptions = wolverineHttpOptions;
            _wolverineRuntime = wolverineRuntime;
        }



        public override async System.Threading.Tasks.Task Handle(Microsoft.AspNetCore.Http.HttpContext httpContext)
        {

            // Tenant Id detection
            // 1. Tenant Id is request header 'tenantId'
            // 2. Wolverine.Http.Runtime.MultiTenancy.FallbackDefault
            var tenantId = await TryDetectTenantId(httpContext);
            var messageContext = new Wolverine.Runtime.MessageContext(_wolverineRuntime);
            messageContext.TenantId = tenantId;
            Wolverine.Http.Runtime.RequestIdMiddleware.Apply(httpContext, messageContext);
            // Reading the request body via JSON deserialization
            var (diCreateUserRequest, jsonContinue) = await ReadJsonAsync<WolverineTest.Web.Handlers.Di.DiCreateUserRequest>(httpContext);
            if (jsonContinue == Wolverine.HandlerContinuation.Stop) return;
            var diCreateUserCommand = WolverineTest.Web.Handlers.Di.DiCreateUserEndpoint.Before(diCreateUserRequest);
            
            // The actual HTTP request handler execution
            var diCreateUserResponse_response = await WolverineTest.Web.Handlers.Di.DiCreateUserEndpoint.Handle(diCreateUserRequest, diCreateUserCommand, messageContext).ConfigureAwait(false);

            // Writing the response body to JSON because this was the first 'return variable' in the method signature
            await WriteJsonAsync(httpContext, diCreateUserResponse_response);
            
            // Have to flush outgoing messages just in case Marten did nothing because of https://github.com/JasperFx/wolverine/issues/536
            await messageContext.FlushOutgoingMessagesAsync().ConfigureAwait(false);

        }

    }

    // END: POST_di_users
    
    
}

