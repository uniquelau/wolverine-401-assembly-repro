// <auto-generated/>
#pragma warning disable
using Microsoft.Extensions.Logging;
using Wolverine.EntityFrameworkCore.Internals;

namespace Internal.Generated.WolverineHandlers
{
    // START: ExGetUserCommandHandler1038433244
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class ExGetUserCommandHandler1038433244 : Wolverine.Runtime.Handlers.MessageHandler
    {
        private readonly Wolverine.EntityFrameworkCore.Internals.IDbContextBuilder<WolverineTest.Web.Data.WolverineTestContext> _dbContextBuilder;
        private readonly Microsoft.Extensions.Logging.ILogger<WolverineTest.Web.Handlers.Explict.ExGetUserCommand> _loggerForMessage;

        public ExGetUserCommandHandler1038433244(Wolverine.EntityFrameworkCore.Internals.IDbContextBuilder<WolverineTest.Web.Data.WolverineTestContext> dbContextBuilder, Microsoft.Extensions.Logging.ILogger<WolverineTest.Web.Handlers.Explict.ExGetUserCommand> loggerForMessage)
        {
            _dbContextBuilder = dbContextBuilder;
            _loggerForMessage = loggerForMessage;
        }



        public override async System.Threading.Tasks.Task HandleAsync(Wolverine.Runtime.MessageContext context, System.Threading.CancellationToken cancellation)
        {
            await using var wolverineTestContext = await _dbContextBuilder.BuildAndEnrollAsync(context, cancellation);
            // The actual message body
            var exGetUserCommand = (WolverineTest.Web.Handlers.Explict.ExGetUserCommand)context.Envelope.Message;

            System.Diagnostics.Activity.Current?.SetTag("message.handler", "WolverineTest.Web.Handlers.Explict.ExGetUserHandler");
            
            // Trying to load the existing Saga data
            var dbUser = await wolverineTestContext.FindAsync<WolverineTest.Web.Data.DbUser>(((WolverineTest.Web.Handlers.Explict.ExGetUserCommand)context.Envelope.Message).Id).ConfigureAwait(false);
            var result_of_Assert1 = Wolverine.Runtime.Handlers.EntityIsNotNullGuard<WolverineTest.Web.Data.DbUser>.Assert(dbUser, ((Microsoft.Extensions.Logging.ILogger)_loggerForMessage), "dbUser", context.Envelope);
            // Evaluate whether or not the execution should stop based on the HandlerContinuation value
            if (result_of_Assert1 == Wolverine.HandlerContinuation.Stop) return;
            
            // The actual message execution
            var outgoing1 = WolverineTest.Web.Handlers.Explict.ExGetUserHandler.Handle(exGetUserCommand, dbUser);

            
            // Outgoing, cascaded message
            await context.EnqueueCascadingAsync(outgoing1).ConfigureAwait(false);

        }

    }

    // END: ExGetUserCommandHandler1038433244
    
    
}

